const {Telegraf, session, Scenes: { WizardScene, Stage }, Markup} = require('telegraf')
const TelegramBot = require('node-telegram-bot-api')
require('dotenv').config() //–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –Ω–∏–∂–µ
const text = require('./const')



const bot = new Telegraf(process.env.TOKEN) //–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
/* 
bot.start((ctx) => ctx.reply(`–ü—Ä–∏–≤–µ—Ç, ${ctx.message.from.first_name ? ctx.message.from.first_name :
     '–¥—Ä—É–≥'}! –Ø —á–∞—Ç –±–æ—Çüôåüèªüòá. –í—ã–±–µ—Ä–∏ —Ç–æ, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∏ —è —Ç–µ–±—è —Å–æ –≤—Å–µ–º –æ–∑–Ω–∞–∫–æ–º–ª—é.`)) */

bot.help((ctx) => ctx.reply(text.commands)) //–±–µ—Ä–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞ const.js, —Ç–∞–º —Ç–µ–∫—Å—Ç –∏–∑ const commands

bot.command('start', async (ctx)=>{
 
    try{ //—Å—Ç–∞–≤–∏–º –≤ try –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏
        // await –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–∑–¥–µ –≥–¥–µ –º–µ—Ç–æ–¥ ctx
        await ctx.replyWithHTML(`–ü—Ä–∏–≤–µ—Ç, ${ctx.message.from.first_name ? ctx.message.from.first_name :
            '–¥—Ä—É–≥'} ! –ú–µ–Ω—è –∑–æ–≤—É—Ç <b>–ú–∏—Å—Ç–µ—Ä –ú–æ–ø—Å</b>üôåüèªüòá. –í—ã–±–µ—Ä–∏ —Ç–æ, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∏ —è —Ç–µ–±—è —Å–æ –≤—Å–µ–º –æ–∑–Ω–∞–∫–æ–º–ª—é.`, Markup.inlineKeyboard(
            [
                [Markup.button.callback('–ó–∞–∫–∞–∑–∞—Ç—å —Å–∞–π—Ç', 'btn_1')],
                [Markup.button.callback('–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ', 'btn_2'), Markup.button.callback('–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏', 'btn_3')]
              
            ]
        )) 
    } catch(e) {
        console.error(e) //–µ—Å–ª–∏ –≤—ã—Å–∫–∞–∫–∏–≤–∞–µ—Ç –æ—à–∏–±–∫–∞, —Ç–æ –æ–Ω–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª–∏
    }
  
})

function addActionBot(name, src, text) { //–£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ö–ù–û–ü–û–ö

    bot.action(name, async (ctx) => {

        try{
            await ctx.answerCbQuery()//–ß—Ç–æ–±—ã –ø—Ä–æ–ø–∞–¥–∞–ª–∏ —á–∞—Å–∏–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ø—Ä–æ—à–ª–æ–π –∫–Ω–æ–ø–∫–µ
            if(src !== false) { //–µ—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –≤—ã—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ –Ω–µ–π –∏ —Ç.–¥.
                await ctx.replyWithPhoto({
                    source: src
                }) //—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
            }
            await ctx.replyWithHTML(text, {
                disable_web_page_preview: true //–µ—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ —Å—Å—ã–ª–∫–∞, —Ç–æ –¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —É–±–∏—Ä–∞–µ—Ç —Å–Ω–∏–ø–ø–µ—Ç
            })
    
        } catch(e) {
            console.error(e) //–µ—Å–ª–∏ –≤—ã—Å–∫–∞–∫–∏–≤–∞–µ—Ç –æ—à–∏–±–∫–∞, —Ç–æ –æ–Ω–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª–∏
        }
    })

}

//–ó–ê–ü–û–õ–ù–ò–¢–¨ –ó–ê–Ø–í–ö–£
const exit_keyboard = Markup.keyboard(['–í—ã–π—Ç–∏ –∏–∑ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è']).oneTime()
const remove_keyboard = Markup.removeKeyboard()

const nameHadler = Telegraf.on('text', async ctx => {

    ctx.scene.state.name = ctx.message.text

    await ctx.reply('–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É, –æ—Å—Ç–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å —Ç–æ–±–æ–π —Å–≤—è–∑–∞—Ç—å—Å—èüòâ', exit_keyboard)

    return ctx.wizard.next()

})

const numberHadler = Telegraf.hears(/^[0-9]+$/, async ctx => {

    ctx.scene.state.telephon = ctx.message.text

    await ctx.reply('–ï—Å–ª–∏ –º—ã –Ω–µ –¥–æ–∑–≤–æ–Ω–∏–º—Å—è, —Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º —Ç–µ–±–µ –Ω–∞ –ø–æ—á—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—é –ø–æ—á—Ç—É', exit_keyboard)

    return ctx.wizard.next()
})

const mailHadler = Telegraf.on('text', async ctx => {

    ctx.scene.state.mail = ctx.message.text

    await ctx.reply('–û–ø–∏—à–∏ –ø—Ä–æ–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º, –º—ã –∑–∞—Ä–∞–Ω–µ–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–≤–æ–µ–≥–æ —Å–∞–π—Ç–∞ü§î', remove_keyboard)

    return ctx.wizard.next()

})

const descrHadler = Telegraf.on('text', async ctx => {

    ctx.scene.state.descr = ctx.message.text
    Object.assign(ctx.session, ctx.scene.state)

    await ctx.replyWithHTML(
        ` –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–Ω–µ—Å–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –ø–æ—Å–ª–µ —á–µ–≥–æ, —è –æ—Ç–ø—Ä–∞–≤–ª—é –∏—Ö –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.
        <b>–û–±—Ä–∞—â–µ–Ω–∏–µ:</b> ${ctx.session.name}
        <b>–¢–≤–æ–π –Ω–æ–º–µ—Ä:</b> ${ctx.session.telephon}
        <b>–¢–≤–æ–π –Ω–æ–º–µ—Ä:</b> ${ctx.session.mail}
        <b>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:</b> ${ctx.session.descr}
        `,
        Markup.inlineKeyboard([
        Markup.button.callback('–û—Ç–ø—Ä–∞–≤–∏—Ç—å', 'btn_info'),
        ])
        

    )

    return ctx.scene.leave()
         
})

bot.action('btn_info', async (ctx) => {

    try{
        await ctx.answerCbQuery()//–ß—Ç–æ–±—ã –ø—Ä–æ–ø–∞–¥–∞–ª–∏ —á–∞—Å–∏–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ø—Ä–æ—à–ª–æ–π –∫–Ω–æ–ø–∫–µ

        await ctx.replyWithPhoto({
            source: './img/desc.jpg'
        }) 
        
        await ctx.replyWithHTML ( 
        `
–£—Ä–∞–∞–∞–∞–∞, –º—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ —à–∞–≥–∏ –∏ –∑–∞—è–≤–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞–º!ü§©
–ü–æ–∑–¥–Ω–µ–µ –º—ã —Å–≤—è–∂–µ–º—Å—è –∏ –æ–±—Å—É–¥–∏–º —Ç–≤–æ–π –ø—Ä–æ–µ–∫—Ç.ü§ò        
–ù—É –∞ –ø–æ–∫–∞, —Ç—ã –º–æ–∂–µ—à—å –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–∏–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à–∏ —Å—Ç—Ä–∞–Ω–∏—á–∫–∏ –≤ —Å–æ—Ü.—Å–µ—Ç—è—Ö.
        `,
        Markup.inlineKeyboard([
            [Markup.button.callback('–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ', 'btn_2'), 
            Markup.button.callback('–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏', 'btn_3')]
        
        ]))

    } catch(e) {
        console.error(e) //–µ—Å–ª–∏ –≤—ã—Å–∫–∞–∫–∏–≤–∞–µ—Ç –æ—à–∏–±–∫–∞, —Ç–æ –æ–Ω–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª–∏
    }

})

const infoScene = new WizardScene('infoScene', nameHadler, numberHadler, mailHadler, descrHadler)
infoScene.enter(ctx => ctx.reply('–ö–∞–∫ –∫ —Ç–µ–±–µ –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?', exit_keyboard))

const stage = new Stage([ infoScene ])
stage.hears('exit', ctx => ctx.scene.leave())

bot.use(session(), stage.middleware())


bot.action('btn_1', ctx => ctx.scene.enter('infoScene'))



//–ü–û–†–¢–§–û–õ–ò–û
bot.action('btn_2', async (ctx) => {
    await ctx.answerCbQuery()//–ß—Ç–æ–±—ã –ø—Ä–æ–ø–∞–¥–∞–ª–∏ —á–∞—Å–∏–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ø—Ä–æ—à–ª–æ–π –∫–Ω–æ–ø–∫–µ

    try{
        await ctx.replyWithPhoto({
            source: './img/intel.png'         
        }) 
        await ctx.replyWithHTML('–ö–æ–Ω—Ü–µ–ø—Ç —Ä–µ–¥–∏–∑–∞–π–Ω–∞ —Å–∞–π—Ç–∞ –±—Ä–µ–Ω–¥–∏–Ω–≥–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ Intelligent Deals', {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å",
                            url: 'https://www.behance.net/gallery/133147585/Intelligent-Deals-brand-agency-redesign-website'
                        }
                    ]
                ]
            }
        })

        await ctx.replyWithPhoto({
            source: './img/ostin.png'         
        }) 
        await ctx.replyWithHTML('–ö–æ–Ω—Ü–µ–ø—Ç –ø—Ä–æ–º–æ-—Å–∞–π—Ç–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ –æ–¥–µ–∂–¥—ã O‚ÄôSTIN', {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å",
                            url: 'https://www.behance.net/gallery/133078249/OSTIN-online-clothing-store-redesign-website'
                        }
                    ]
                ]
            }
        })

        await ctx.replyWithPhoto({
            source: './img/cifra.png'         
        }) 
        await ctx.replyWithHTML('–ö–æ–Ω—Ü–µ–ø—Ü–∏—è —Å–∞–π—Ç–∞ –¥–ª—è –í—ã—Å—à–µ–π —à–∫–æ–ª—ã —Ü–∏—Ñ—Ä–æ–≤–æ–π –∫—É–ª—å—Ç—É—Ä—ã –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –ò–¢–ú–û', {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å",
                            url: 'https://www.behance.net/gallery/129926473/Higher-School-of-Digital-Culture-Website'
                        }
                    ]
                ]
            }
        })
            

        await ctx.replyWithPhoto({
            source: './img/puls.png'         
        }) 
        await ctx.replyWithHTML('–ü—Ä–æ–µ–∫—Ç –º–∞–≥–∞–∑–∏–Ω–∞ –ø—É–ª—å—Å–æ–º–µ—Ç—Ä–æ–≤', {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å",
                            url: 'http://desokolovskiy.ru/'
                        }
                    ]
                ]
            }
        })

        await ctx.replyWithPhoto({
            source: './img/taxi.png'         
        }) 
        await ctx.replyWithHTML('–ü—Ä–æ–µ–∫—Ç —Å–µ—Ä–≤–∏—Å–∞ —Ç–∞–∫—Å–∏', {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å",
                            url: 'http://desokolovskiy.ru/'
                        }
                    ]
                ]
            }
        })

        await ctx.replyWithPhoto({
            source: './img/mlg.png'         
        }) 
        await ctx.replyWithHTML('–°–∞–π—Ç —Å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º –ø–∞—Ä–æ–ª–µ–π –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω—É–∂–¥ –∫–æ–º–ø–∞–Ω–∏–∏', {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å",
                            url: 'http://desokolovskiy.ru/'
                        }
                    ]
                ]
            }
        })

    } catch(e) {
        console.error(e) //–µ—Å–ª–∏ –≤—ã—Å–∫–∞–∫–∏–≤–∞–µ—Ç –æ—à–∏–±–∫–∞, —Ç–æ –æ–Ω–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª–∏
    }   

})


//–°–û–¶.–°–ï–¢–ò
bot.action('btn_3', async (ctx) => {

    try{
        await ctx.answerCbQuery()//–ß—Ç–æ–±—ã –ø—Ä–æ–ø–∞–¥–∞–ª–∏ —á–∞—Å–∏–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ø—Ä–æ—à–ª–æ–π –∫–Ω–æ–ø–∫–µ
        await ctx.replyWithPhoto({
                source: './img/social.jpeg'
            }) 
        
        await ctx.replyWithHTML('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à–∏ –ø–æ—Å—Ç—ã –≤ —Å–æ—Ü.—Å–µ—Ç–∏ –º–æ–∂–Ω–æ –∑–¥–µ—Å—å', {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: "–í–∫–æ–Ω—Ç–∞–∫—Ç–µ",
                            url: 'https://m.vk.com/public209076745'
                        },
                        {
                            text: "Instagram",
                            url: 'https://www.instagram.com/my_web_family/'
                        }
                    ]
                ]
            }
        }
        
        
        /* Markup.inlineKeyboard([
            [
                Markup.button.callback('–í–∫–æ–Ω—Ç–∞–∫—Ç–µ', 'btn_vk'),
                Markup.button.callback('Instagram', 'btn_instagram')
            ]
        
        ]) */
        
        )

    } catch(e) {
        console.error(e) //–µ—Å–ª–∏ –≤—ã—Å–∫–∞–∫–∏–≤–∞–µ—Ç –æ—à–∏–±–∫–∞, —Ç–æ –æ–Ω–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª–∏
    }
})

bot.action('btn_vk', async (ctx) => {
    try{
        await ctx.reply
    } catch(e) {
        console.error(e) //–µ—Å–ª–∏ –≤—ã—Å–∫–∞–∫–∏–≤–∞–µ—Ç –æ—à–∏–±–∫–∞, —Ç–æ –æ–Ω–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª–∏
    }
})







bot.launch()

// Enable graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'))
process.once('SIGTERM', () => bot.stop('SIGTERM'))